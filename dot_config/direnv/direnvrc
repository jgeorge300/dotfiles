source $(asdf direnv hook asdf)

# Return the currently active version of a particular tool
#
# This works by looking at the full path to a given executable. If it fits a
# versioned format (e.g., python-3.7.5 or node/10.13.0), then the version is
# returned.
#
get_tool_version() {
  tool=$1
  tool_path=$(/usr/bin/type -P $tool)
  if [[ $tool_path =~ /$tool-([0-9][^/]*)/ ]]; then
    echo ${BASH_REMATCH[1]}
  elif [[ $tool_path =~ /$tool/([0-9][^/]*)/ ]]; then
    echo ${BASH_REMATCH[1]}
  fi
}

# Export the current version of a tool as an ASDF_<TOOL>_VERSION variable
export_tool_version() {
  tool=$1
  tool_version=$(get_tool_version $tool)
  if [[ -n $tool_version ]]; then
    eval "export ASDF_${tool^^}_VERSION=$tool_version"
  fi
}

# Use particular versions of tools (e.g. python@3.7.5)
use_tools() {
  for spec in $@; do
    plugin=${spec%@*}
    version=${spec#*@}

    asdf list $plugin &> /dev/null
    if [[ $? -ne 0 ]]; then
      echo "Plugin $plugin is not installed"
      exit 1
    fi

    eval "export ASDF_${plugin^^}_VERSION=$version"

    asdf current $plugin &> /dev/null
    if [[ $? -ne 0 ]]; then
      asdf install $plugin $version
    fi
  done

  use_asdf
}

# Use a local python env, creating it if necessary
use_pyenv() {
  version=$(asdf current python | awk '{ print $2 }')
  if [[ ! -d .asdf/python-$version ]]; then
    python -m venv .asdf/python-$version
    .asdf/python-$version/bin/pip install --upgrade pip
    .asdf/python-$version/$dir/bin/pip install wheel
  fi
  export PATH=$PWD/.asdf/python-$version/bin:$PATH
}

# Use a central python env, creating it if necessary
use_pyenv_home() {
  version=$(asdf current python | awk '{ print $2 }')
  dir=${PWD//\//_}
  if [[ ! -d ~/.asdf/python-$version/$dir ]]; then
    python -m venv ~/.asdf/python-$version/$dir
    ~/.asdf/python-$version/$dir/bin/pip install --upgrade pip
    ~/.asdf/python-$version/$dir/bin/pip install wheel
  fi
  export PATH=$HOME/.asdf/python-$version/$dir/bin:$PATH
}

# Use a local ruby env, creating it if necessary
use_rbenv() {
  asdf_version=$(asdf current ruby)
  version=${asdf_version%% *}
  if [[ ! -d .asdf/python-$version ]]; then
    mkdir -p .asdf/ruby-$version
  fi
  export GEM_HOME=$PWD/.asdf/ruby-$version
  export PATH=$GEM_HOME/bin:$PATH
}

# Use a custom/local npm registry.
use_local_npm() {
  export npm_config_registry=https://npm.registry.local:4873
  export npm_config_strict_ssl=false
}

# Export PDM's env updates
use_pdm() {
  eval "$(pdm --pep582)"

  if [[ -d '__pypackages__' ]]; then
    local bindir="$(ls -d __pypackages__/*/bin)"
    export PATH="$PWD/$bindir:$PATH"
  fi
}

layout_poetry() {
  if [[ ! -f pyproject.toml ]]; then
    log_error 'No pyproject.toml found.  Use `poetry new` or `poetry init` to create one first.'
    return
  fi

  local VENV=$(poetry env list --full-path | cut -d' ' -f1)
  if [[ -z $VENV || ! -d $VENV/bin ]]; then
    log_error 'No poetry virtual environment found.  Use `poetry install` to create one first.'
    return
  fi
  VENV=$VENV/bin
  export VIRTUAL_ENV=$(echo "$VENV" | rev | cut -d'/' -f2- | rev)
  export POETRY_ACTIVE=1
  PATH_add "$VENV"
}

# Set CPATH for projects that need it
use_xcode_cpath() {
  if [[ -d /Applications/Xcode.app ]]; then
      export CPATH=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include
  fi
}

# Add Android SDK to path
use_android() {
  if [[ -z $ASDF_JAVA_VERSION ]]; then
    local javas=($(asdf list java | grep 'jdk-8\|-8u' | awk '{ print $1 }'))
    if [[ ${#javas[@]} -lt 1 ]]; then
      log_error 'a version of JDK 8 must be installed'
      return
    fi

    local java=${javas[0]}
    export ASDF_JAVA_VERSION=$java
  fi

  export JAVA_HOME=$(dirname $(dirname $(asdf which java)))
  export CLASSPATH=$(dirname $(dirname $(asdf which java)))/lib

  if [[ -z $ANDROID_HOME ]]; then
    export ANDROID_HOME=$HOME/Library/Android/sdk
  fi

  export ANDROID_SDK_HOME=$ANDROID_HOME
  export ANDROID_AVD_HOME=$HOME/.android/avd
  export PATH=$PATH:$ANDROID_HOME/emulator
  export PATH=$PATH:$ANDROID_HOME/tools
  export PATH=$PATH:$ANDROID_HOME/tools/bin
  export PATH=$PATH:$ANDROID_HOME/platform-tools
}

# vim:filetype=bash:
