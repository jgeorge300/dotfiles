#!/bin/zsh

autoload colors; colors

source $HOME/.dotfiles/zsh/common.zsh

if [ -d $HOMEBREW_BASE ]; then
    export PATH=$HOMEBREW_BASE/bin:$PATH
fi

setopt null_glob

# Log output
function log {
    local msg=$1
    local color=${2:-$fg_bold[green]}
    echo "$color>>>$reset_color $msg"
}

# Log output
function logSub {
    log $1 $fg_bold[blue]
}

# Log error output
function err {
    log $1 $fg_bold[red]
}

# Log warning output
function warn {
    log $1 $fg_bold[yellow]
}

# Get a file owner
function owner {
    if [[ $OSTYPE == darwin* ]]; then
        return $(stat -f '%Su' $1)
    fi
    return $(stat -c '%U' $1)
}

# Create a directory
function makedir {
    if [[ ! -d $1 ]]; then
        mkdir -p $1
        logSub "Created $1/"
    fi
}

# Create a symlink
function link {
    if [[ ! -r $2 ]]; then
        ln -s $1 $2
        logSub "Linked $1 -> $2"
    fi
}

# Sed
function sedInPlace {
    if [[ $OSTYPE == darwin* ]]; then
        sed -i "" $@
    else
        sed -i"" $@
    fi
}

# Fix terminal config
function fixterm {
    local tmpfile=$(mktemp /tmp/dotfiles.XXXXXX)
    curl --silent -o $tmpfile https://raw.githubusercontent.com/wez/wezterm/master/termwiz/data/wezterm.terminfo
    tic -x -o $HOME/.terminfo $tmpfile &> /dev/null
    rm $tmpfile
    logSub "Installed wezterm terminfo"

    # Fix terminal definition so C-H works properly in neovim
    kbs=$(infocmp | grep -o 'kbs=[^,]\+')
    if [[ $kbs =~ "kbs=^[hH]" ]]; then
        infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\177/' > /tmp/$TERM.ti
        tic /tmp/$TERM.ti
        rm /tmp/$TERM.ti
        logSub "Fixed backspace code in terminfo"
    fi
}

# Check if a command exists
function checkcmd {
    local cmd=$1
    local required=$2
    if (( ! $+commands[$cmd] )); then
        err "$cmd is missing"
        if [[ $required == "1" ]]; then
            exit 1
        fi
    fi
}

# Basic health check
function dotfiles-health {
    local os=$(uname)

    checkcmd brew
    checkcmd tmux

    if [[ $os == "Linux" ]]; then
        checkcmd unzip 1
        checkcmd xclip
    fi
}

# Rebuild bat cache
function dotfiles-bat {
    if (( ! $+commands[bat] )); then
      warn "Skipping bat cache update due to missing bat"
      return
    fi
    log "Rebuilding bat cache..."
    local out=$(bat cache --build 2>&1)
    if (( $? )); then
        err "Error rebuilding bat cache"
        err $out
    fi
}

# Install build tools necessary for building other things like python
function dotfiles-buildtools {
    log "Installing build tools..."
    local out=""
    local code=""

    if [[ $OSTYPE == linux* ]]; then
        local installed_packages=($(dpkg-query --show --showformat '${Package}\n'))
        local desired_packages=(
            make
            build-essential
            libssl-dev
            zlib1g-dev
            libbz2-dev
            libreadline-dev
            libsqlite3-dev
            wget
            curl
            llvm
            libncursesw5-dev
            xz-utils
            tk-dev
            libxml2-dev
            libxmlsec1-dev
            libffi-dev
            liblzma-dev
        )
        for pkg in $desired_packages; do
            if ((! $installed_packages[(Ie)$pkg])); then
                out=$(sudo apt install -y $pkg 2>&1)
                if (( $? )); then
                    err "Error installing $pkg"
                    err $out
                else
                    logSub "Installed $pkg"
                fi
            fi
        done
    else
        out=$(brew install openssl readline sqlite3 xz zlib 2>&1)
        if (( $? )); then
            err "Error installing build tools"
            err $out
        fi
    fi
}

# Install terminal fonts
function dotfiles-fonts {
    log "Installing terminal fonts..."

    if [[ $OSTYPE == darwin* ]]; then
        local fonts
        fonts=($HOME/Library/Fonts/Symbols-1000*(NY1))
        if (( ${#fonts} == 0 )) then
            curl --silent -o "$HOME/Library/Fonts/Symbols-1000-em Nerd Font Complete.ttf" "https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/src/glyphs/Symbols-1000-em%20Nerd%20Font%20Complete.ttf"
            logSub "Installed Symbols-1000-em Nerd Font Complete"
        fi
    fi
}

# Link dotfiles into $HOME, update terminfo
function dotfiles-home {
    log "Updating home directory files..."

    # Remove broken links
    for f in $HOME/.*(@) $XDG_CONFIG_HOME/*(@); do
        if [[ ! -e $f ]]; then
            rm $f
            logSub "Removed $f"
        fi
    done

    for f in $DOTFILES/home/*(.); do
        link $f $HOME/.$f:t
    done

    makedir $XDG_CONFIG_HOME

    for f in $DOTFILES/config/*; do
        if [[ -d $XDG_CONFIG_HOME/$f:t ]] && [[ ! -L $XDG_CONFIG_HOME/$f:t ]]; then
            mkdir -p $XDG_CONFIG_HOME/local
            mv $XDG_CONFIG_HOME/$f:t $XDG_CONFIG_HOME/local/$f:t
            logSub "Moved $XDG_CONFIG_HOME/$f:t -> $XDG_CONFIG_HOME/local/$f:t"
        fi
        link $f $XDG_CONFIG_HOME/$f:t
    done

    makedir $XDG_CACHE_HOME/tmux/resurrect
    makedir $XDG_CACHE_HOME/zsh
    makedir $XDG_CACHE_HOME/direnv/allow

    # Fix the terminal definition so that C-H works properly in neovim. This
    # function may also need to be run for the tmux terminal type.
    fixterm
}

# Install terminal fonts
function dotfiles-fonts {
    log "Installing terminal fonts..."
    local fonts

    if [[ $OSTYPE == darwin* ]]; then
        fonts=($HOME/Library/Fonts/Symbols-1000*(NY1))
        if (( ${#fonts} == 0 )) then
            curl --silent -o "$HOME/Library/Fonts/Symbols-1000-em Nerd Font Complete.ttf" 'https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/src/glyphs/Symbols-1000-em%20Nerd%20Font%20Complete.ttf'
            logSub "Installed Symbols font"
        fi
    fi
}

# Link and activate launchd scripts
function dotfiles-launchd {
    log "Linking and bootstrapping launchd scripts..."

    for f in $DOTFILES/launchd/*; do
        if [[ ! -h $HOME/Library/LaunchAgents/$f:t ]]; then
            link $f $HOME/Library/LaunchAgents/$f:t
            launchctl bootstrap gui/$UID $HOME/Library/LaunchAgents/$f:t
            logSub "Bootstrapped $f:t"
        fi
    done
}

# Install homebrew and core packages, update packages
function dotfiles-brew {
    log "Updating brew..."

    if [[ $OSTYPE == linux* ]]; then
        if (( ! $+commands[git] )) || (( ! $+commands[gcc] )) || (( ! $+commands[curl] )); then
            logSub "Installing system requirements..."
            sudo apt-get update
            sudo apt-get install -y build-essential curl file git || true
        fi
    fi

    if ! hash brew; then
        log "Installing homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

        # If homebrew was just installed, ensure it's in the path
        export PATH=$HOMEBREW_BASE/bin:$PATH

        if [[ $OSTYPE == linux* ]]; then
            # Add a brew group so that the current user can manage brew
            sudo groupadd brew
            sudo usermod -a -G brew $USER
            sudo chgrp -R brew $HOMEBREW_BASE
            sudo chmod g+w -R $HOMEBREW_BASE
        fi

        rehash
    fi

    if [[ $OSTYPE == linux* ]]; then
        local base_group=$(stat -c '%G' $HOMEBREW_BASE)
        if [[ $base_group != 'brew' ]]; then
            err "$HOMEBREW_BASE is not owned by brew group"
            return
        fi
    fi

    logSub "Updating brew package list..."
    brew update

    logSub "Checking for missing brew packages..."
    brew_packages=(
        'bash'            # update from system stock version
        'bat'             # better cat
        'deno'            # JS/TS runtime
        'direnv'          # environment manager
        'fd'              # file finder
        'fzf'             # fuzzy finder
        'git'             # update from system stock git
        'oven-sh/bun/bun' # JS/TS runtime
        'pdm'             # python package manager
        'python'          # default python
        'ripgrep'         # better grep
        'rust'            # better grep
        'jdxcode/tap/rtx' # tool version manager
        'tig'             # terminal git ui
    )

    if [[ $OSTYPE == darwin* ]]; then
        brew_packages=(
            $brew_packages
            'font-jetbrains-mono-nerd-font'
            'phoenix'
            '1password-cli'
        )

        taps=($(brew tap))
        if ((! $taps[(Ie)homebrew/cask-fonts])); then
            brew tap homebrew/cask-fonts
        fi
    fi

    local need_rehash=0

    local installed_packages=($(brew ls --versions | awk '{ print $1 }' | cut -d'@' -f1))
    for pkg in $brew_packages; do
        # some packages include tap names, and python packages include versions
        local name=$(echo $pkg | awk -F '/' '{print $NF}' | cut -d'@' -f1)
        if ((! $installed_packages[(Ie)$name])); then
            logSub "Installing $pkg..."
            brew install $pkg
            need_rehash=1
        fi
    done

    if (( $need_rehash )); then
        # Let the shell know about any newly installed packages
        rehash
    fi

    logSub "Updating installed brew packages..."
    brew upgrade

    # Remove git's included zsh completions in favor of the system completions
    if [[ -f $HOMEBREW_BASE/share/zsh/site-functions/_git ]]; then
	hb_owner=$(owner $HOMEBREW_BASE)
	if [[ $hb_owner == $USER ]]; then
            rm -f $HOMEBREW_BASE/share/zsh/site-functions/_git
	else
            sudo rm -f $HOMEBREW_BASE/share/zsh/site-functions/_git
	fi
    fi

    # Update 1password-cli zsh completions
    if (( $+commands[op] )); then
        op completion zsh >! $ZDATADIR/functions/_op
    fi

    # Update rtx zsh completions
    if (( $+commands[rtx] )); then
        rtx complete --shell zsh >! $ZDATADIR/functions/_rtx
    fi

    # Update bun zsh completions
    if (( $+commands[bun] )); then
        cp $ZDOTDIR/.zshrc $ZDOTDIR/.zshrc.bak
        bun completions > /dev/null
        mv $ZDOTDIR/.zshrc.bak $ZDOTDIR/.zshrc
    fi
}

# Install or update deno
function dotfiles-deno {
    log "Updating deno..."

    local out=""
    local version=""

    if (( ! $+commands[deno] )); then
        logSub "Installing..."
        out=$(curl -fsSL https://deno.land/x/install/install.sh | sh)
        if (( $? )); then
            err "Error installing deno"
            err $out
        fi
        rehash
    else
        out=$(deno upgrade)
        if [[ ! $out =~ "is the most recent release" ]]; then
            version=$(deno --version | grep 'deno [0-9]' | awk '{print $2}')
            logSub "Installed version $version"
        fi
    fi

    deno completions zsh >! $ZDATADIR/functions/_deno
}

# Update zsh plugins
function dotfiles-zsh {
    log "Updating zsh plugins..."

    if [[ -z $ZPLUGDIR ]]; then
        err "ZPLUGDIR not defined"
        return
    fi

    local out=""
    local head=""

    for plugin in $ZPLUGDIR/*/*; do
        head=$(git -C $plugin rev-parse HEAD)
        out=$(git -C $plugin pull -q --recurse-submodules 2>&1)
        if (( $? )); then
            err "Error updating ${plugin}"
            err $out
            continue
        fi
        out=$(git -C $plugin submodule update --remote 2>& 1)
        if (( $? )); then
            err "Error updating ${plugin}"
            err $out
            continue
        fi
        if [[ $(git -C $plugin rev-parse HEAD) != $head ]]; then 
            logSub "Updated ${plugin:h:t}/${plugin:t}"
        fi
    done
}

# Update global python packages
function dotfiles-python {
    if (( ! $+commands[python] )); then
        warn "Skipping python update due to missing python"
	return
    fi

    log "Updating global python packages..."

    local out=""
    out=$(pip install -U pip setuptools pynvim neovim-remote > /dev/null 2>& 1)
    if (( $? )); then
        err "Error updating packages"
        err $out
    fi
}

# Update global npm packages
function dotfiles-node {
    if (( ! $+commands[npm] )); then
        warn "Skipping node update due to missing npm"
	return
    fi

    log "Updating package managers..."

    if (( $+commands[corepack] )); then
        corepack prepare pnpm@latest --activate
        corepack prepare npm@latest --activate
        corepack prepare yarn@1 --activate
    fi

    log "Updating global node packages..."

    # get list of outdated global packages
    local mods=($(npm --registry=https://registry.npmjs.org outdated -g --parseable))
    for mod in $mods; do
        # extract current and latest fields
        array=(${(@s/:/)mod})
        currentPkg=$array[3]
        latestPkg=$array[4]

        # extract current and latest versions, minus any prerelease tags
        currentVerParts=(${(@s/@/)currentPkg})
        currentVer=$currentVerParts[2]
        latestVerParts=(${(@s/@/)latestPkg})
        latestVer=$latestVerParts[2]

        if [[ $latestVer == 'linked' ]]; then
            logSub "Skipping $latestPkg"
            continue
        fi

        # read versions into arrays
        current=(${(@s/./)currentVer})
        latest=(${(@s/./)latestVer})

        # if latest is newer than current, install latest
        if (( latest[1] > current[1] )) || {
            (( latest[1] == current[1] )) &&
            (( latest[2] > current[2] )) || {
                (( latest[1] == current[1] )) &&
                (( latest[2] == current[2] )) &&
                (( latest[3] > current[3] ));
            };
        }; then
            local npm=$(which npm)
            $npm install --registry=https://registry.npmjs.org --progress=false -g $latestPkg > /dev/null
            logSub "Installed $latestPkg"
        fi
    done
}

# Update tmux plugins
function dotfiles-tmux {
    log "Updating tmux plugins..."
    local out=""

    if [[ -z $TMUX_PLUGIN_MANAGER_PATH ]]; then
        err "TMUX_PLUGIN_MANAGER_PATH not defined"
        return
    fi

    if [[ -d $TMUX_PLUGIN_MANAGER_PATH/tpm ]]; then
        logSub "Installing plugins..."
        $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/install_plugins

        logSub "Removing unused plugins..."
        $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/clean_plugins

        logSub "Updating plugins..."
        $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/update_plugins all
    fi
}

cd $HOME

if [[ -n $1 ]]; then
    if [[ $1 == -h || $1 == --help ]]; then
        echo 'usage: dotfiles [-h | --help | <group>]'
        echo
        echo 'Update local environment. All groups are updated by default.'
        echo
        echo 'Options:'
        echo '    -h, --help     Show this help message'
        echo '    <group>        A group to update'
        echo
        echo 'Available groups:'
        echo '    bat            Rebuild bat theme and filetype cache'
        echo '    brew           Update brew packages, install defaults'
        echo '    fonts          Install terminal fonts'
        echo '    home           Update dotfiles and home directories, fixup terminfo database'
        echo '    launchd        Link and bootstrap launchd scripts'
        echo '    node           Update global node packages, install defaults'
        echo '    python         Update global python packages, install defaults'
        echo '    tmux           Update tpm packages'
        echo '    vim            Update vim plugins'
        echo '    zsh            Update zsh plugins'
    elif [[ $1 == -* ]]; then
        echo "Unknown option $1"
        exit 1
    else
        dotfiles-$1
        log "Done"
    fi
else
    dotfiles-health
    dotfiles-home
    dotfiles-brew
    dotfiles-fonts
    dotfiles-buildtools
    dotfiles-zsh
    dotfiles-python
    dotfiles-node
    dotfiles-tmux
    dotfiles-bat

    if [[ $OSTYPE == darwin* ]]; then
        dotfiles-launchd
    fi

    log "Done"
fi
