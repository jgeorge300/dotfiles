#!/usr/bin/env python3

import asyncio
from os import getenv
from sys import argv, exit

palettes = {
  'dark': {
    'bg_0': '#103c48',
    'bg_1': '#184956',
    'bg_2': '#2d5b69',
    'dim_0': '#72898f',
    'fg_0': '#adbcbc',
    'fg_1': '#cad8d9',
    'red': '#fa5750',
    'green': '#75b938',
    'yellow': '#dbb32d',
    'blue': '#4695f7',
    'magenta': '#f275be',
    'cyan': '#41c7b9',
    'br_red': '#ff665c',
    'br_green': '#84c747',
    'br_yellow': '#ebc13d',
    'br_blue': '#58a3ff',
    'br_magenta': '#ff84cd',
    'br_cyan': '#53d6c7',
    'orange': '#ed8649',
    'violet': '#af88eb',
    'br_orange': '#fd9456',
    'br_violet': '#bd96fa',
  },

  'light': {
    'bg_0': '#fbf3db',
    'bg_1': '#e9e4d0',
    'bg_2': '#cfcebe',
    'dim_0': '#909995',
    'fg_0': '#53676d',
    'fg_1': '#3a4d53',
    'red': '#d2212d',
    'green': '#489100',
    'yellow': '#ad8900',
    'blue': '#0072d4',
    'magenta': '#ca4898',
    'cyan': '#009c8f',
    'br_red': '#cc1729',
    'br_green': '#428b00',
    'br_yellow': '#a78300',
    'br_blue': '#006dce',
    'br_magenta': '#c44392',
    'br_cyan': '#00978a',
    'orange': '#c25d1e',
    'violet': '#8762c6',
    'br_orange': '#bc5819',
    'br_violet': '#825dc0',
  },

  'black': {
    'bg_0': '#181818',
    'bg_1': '#252525',
    'bg_2': '#3b3b3b',
    'dim_0': '#777777',
    'fg_0': '#b9b9b9',
    'fg_1': '#dedede',
    'red': '#ed4a46',
    'green': '#70b433',
    'yellow': '#dbb32d',
    'blue': '#368aeb',
    'magenta': '#eb6eb7',
    'cyan': '#3fc5b7',
    'br_red': '#ff5e56',
    'br_green': '#83c746',
    'br_yellow': '#efc541',
    'br_blue': '#4f9cfe',
    'br_magenta': '#ff81ca',
    'br_cyan': '#56d8c9',
    'orange': '#e67f43',
    'violet': '#a580e2',
    'br_orange': '#fa9153',
    'br_violet': '#b891f5',
  },

  'white': {
    'bg_0': '#ffffff',
    'bg_1': '#ebebeb',
    'bg_2': '#cdcdcd',
    'dim_0': '#878787',
    'fg_0': '#474747',
    'fg_1': '#282828',
    'red': '#d6000c',
    'green': '#1d9700',
    'yellow': '#c49700',
    'blue': '#0064e4',
    'magenta': '#dd0f9d',
    'cyan': '#00ad9c',
    'br_red': '#bf0000',
    'br_green': '#008400',
    'br_yellow': '#af8500',
    'br_blue': '#0054cf',
    'br_magenta': '#c7008b',
    'br_cyan': '#009a8a',
    'orange': '#d04a00',
    'violet': '#7f51d6',
    'br_orange': '#ba3700',
    'br_violet': '#6b40c3',
  },
}

def get_kitty_theme(variant):
    colors = palettes[variant]

    theme = {
        'foreground': colors['fg_0'],
        'background': colors['bg_0'],

        'cursor': colors['red'],
        'cursor_text_color': colors['bg_0'],

        'color0': colors['bg_1'],
        'color8': colors['bg_2'],

        'color1': colors['red'],
        'color9': colors['br_red'],

        'color2': colors['green'],
        'color10': colors['br_green'],

        'color3': colors['yellow'],
        'color11': colors['br_yellow'],

        'color4': colors['blue'],
        'color12': colors['br_blue'],

        'color5': colors['magenta'],
        'color13': colors['br_magenta'],

        'color6': colors['cyan'],
        'color14': colors['br_cyan'],

        'color7': colors['dim_0'],
        'color15': colors['fg_1'],

        'color16': colors['bg_0'],
        'color17': colors['fg_0'],
        'color18': colors['orange'],
        'color19': colors['br_orange'],
        'color20': colors['violet'],
        'color21': colors['br_violet'],

        'selection_foreground': 'none',
        'selection_background': colors['bg_2'],
        'active_tab_foreground': colors['fg_1'],

        'selection_foreground': 'none',
        'selection_background': colors['bg_2'],
        'active_tab_foreground': colors['fg_1'],
        'active_tab_background': colors['bg_2'],
        'inactive_tab_foreground': colors['dim_0'],
        'inactive_tab_background': colors['bg_0'],
        'tab_bar_background': colors['bg_0'],
    }

    return theme


async def update_kitty_sessions(variant):
    colors = get_kitty_theme(variant)
    color_strings = [f"{c}={colors[c]}" for c in colors]

    color_string = " ".join(color_strings)

    await (
        await asyncio.create_subprocess_shell(
            f"kitty @ --to=unix:/tmp/kitty.sock set-colors -c -a {color_string}",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
        )
    ).communicate()


def update_kitty_conf(variant):
    kitty_conf = f'{getenv("HOME")}/.config/kitty/colors.conf'
    colors = get_kitty_theme(variant)
    color_strings = [f"{c} {colors[c]}" for c in colors]

    with open(kitty_conf, mode="w") as conf_file:
        conf_file.write("\n".join(color_strings))
        conf_file.write("\n")


async def update_neovim():
    proc = await asyncio.create_subprocess_shell(
        "nvr --serverlist", stdout=asyncio.subprocess.PIPE
    )
    stdout = (await proc.communicate())[0].decode("utf-8")
    sockets = [s for s in stdout.split("\n") if len(s) > 0]

    await asyncio.gather(
        *[
            asyncio.create_subprocess_shell(
                '''nvr --servername %s -c ":colorscheme selenized"''' % socket
            )
            for socket in sockets
        ]
    )


async def list_processes():
    proc_lister = await asyncio.create_subprocess_exec(
        "ps", "-e", stdout=asyncio.subprocess.PIPE
    )
    lines = (await proc_lister.communicate())[0].decode().splitlines()
    return set([l.split()[3] for l in lines])


async def main():
    if len(argv) < 2:
        print('usage: update_theme VARIANT')
        exit(1)

    variant = argv[1]

    home = getenv('HOME')
    with open(f"{home}/.theme", "w") as theme_file:
        theme_file.write(f"{variant}\n")

    tasks = []

    if any("kitty" in p for p in await list_processes()):
        tasks.append(update_kitty_sessions(variant))

    update_kitty_conf(variant)

    tasks.append(update_neovim())

    await asyncio.gather(*tasks)


asyncio.get_event_loop().run_until_complete(main())
